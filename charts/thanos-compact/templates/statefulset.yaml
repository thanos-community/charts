---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "thanos-compact.fullname" . }}
  labels:
    {{- include "thanos-compact.labels" . | nindent 4 }}
spec:
  replicas: 1
{{- with .Values.updateStrategy }}
  updateStrategy: {{ toYaml . | nindent 4 }}
{{- end }}
  selector:
    matchLabels:
      {{- include "thanos-compact.selectorLabels" . | nindent 6 }}
      {{- with .Values.statefulsetMatchLabels }}{{ toYaml . | nindent }}{{ end }}
  serviceName: {{ include "thanos-compact.fullname" . }}
  template:
    metadata:
      labels:
        {{- include "thanos-compact.selectorLabels" . | nindent 8 }}
{{- with .Values.podLabels }}{{ toYaml . | nindent 8 }}{{ end }}
    {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
    {{- end }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "thanos-compact.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      containers:
        - name: {{ .Chart.Name }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          env:
          - name: OBJSTORE_CONFIG
            valueFrom:
              secretKeyRef:
                key: thanos.yaml
                name: thanos-objectstore
          {{- with .Values.extraEnv }}{{ toYaml . | nindent 12 }}{{- end }}
          args:
            - "compact"
            - "--wait"
            - "--log.level={{ .Values.logLevel }}"
            - "--log.format={{ .Values.logFormat }}"
            - "--data-dir={{ .Values.dataDir }}"
            - "--objstore.config=$(OBJSTORE_CONFIG)"
          ports:
            - name: http
              containerPort: {{ .Values.http.port }}
              protocol: TCP
          livenessProbe:
            failureThreshold: 4
            httpGet:
              path: /-/healthy
              port: http
              scheme: HTTP
            periodSeconds: 30
          readinessProbe:
            failureThreshold: 20
            httpGet:
              path: /-/ready
              port: http
              scheme: HTTP
            periodSeconds: 5
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          terminationMessagePolicy: FallbackToLogsOnError
          volumeMounts:
          - name: data
            mountPath: {{ .Values.dataDir }}
            readOnly: false
      terminationGracePeriodSeconds: 120
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      volumes:
        {{- if not .Values.persistentVolume.enabled }}
        - name: data
          emptyDir: {}
        {{- else if .Values.persistentVolume.existingClaim }}
        - name: data
          persistentVolumeClaim:
            claimName: {{ .Values.persistentVolume.existingClaim }}
        {{- end }}
    {{- if and .Values.persistentVolume.enabled (not .Values.persistentVolume.existingClaim) }}
  volumeClaimTemplates:
  - metadata:
      name: data
      labels:
        {{- include "thanos-compact.selectorLabels" . | nindent 10 }}
{{- with .Values.persistentVolume.labels }}{{ toYaml . | nindent 10 }}{{ end }}
    {{- with .Values.persistentVolume.annotations }}
      annotations:
        {{- toYaml . | nindent 10 }}
    {{- end }}
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: "{{ .Values.persistentVolume.size }}"
      {{- if .Values.persistentVolume.storageClass }}
      {{- if (eq "-" .Values.persistentVolume.storageClass) }}
      storageClassName: ""
      {{- else }}
      storageClassName: "{{ .Values.persistentVolume.storageClass }}"
      {{- end }}
      {{- end }}
  {{- end }}
